#include <stdio.h>

// Function to find the waiting time for all processes
void findWaitingTime(int n, int bt[], int pri[], int wt[])
{
    // Declare variables
    int i, j, temp, sum;
    
    // Sort processes by priority
    for (i = 0; i < n - 1; i++) {
        for (j = i + 1; j < n; j++) {
            if (pri[i] > pri[j]) {
                temp = pri[i];
                pri[i] = pri[j];
                pri[j] = temp;
                temp = bt[i];
                bt[i] = bt[j];
                bt[j] = temp;
            }
        }
    }
    
    // Calculate waiting time for each process
    wt[0] = 0;
    for (i = 1; i < n; i++) {
        sum = 0;
        for (j = 0; j < i; j++)
            sum += bt[j];
        wt[i] = sum;
    }
}

// Function to find the turnaround time for all processes
void findTurnaroundTime(int n, int bt[], int pri[], int wt[], int tat[])
{
    // Calculate turnaround time for each process
    int i;
    for (i = 0; i < n; i++)
        tat[i] = bt[i] + wt[i];
}

// Function to calculate average waiting time and average turnaround time
void findAvgTime(int n, int bt[], int pri[])
{
    int wt[n], tat[n], total_wt = 0, total_tat = 0, i;
    
    // Calculate waiting time and turnaround time for all processes
    findWaitingTime(n, bt, pri, wt);
    findTurnaroundTime(n, bt, pri, wt, tat);
    
    // Print results
    printf("Process\tBurst Time\tPriority\tWaiting Time\tTurnaround Time\n");
    for (i = 0; i < n; i++) {
        total_wt += wt[i];
        total_tat += tat[i];
        printf("P%d\t\t%d\t\t%d\t\t%d\t\t%d\n", i+1, bt[i], pri[i], wt[i], tat[i]);
    }
    printf("Average waiting time: %.2f\n", (float)total_wt / (float)n);
    printf("Average turnaround time: %.2f\n", (float)total_tat / (float)n);
}

// Main function
int main()
{
    int n = 3; // Number of processes
    
    // Burst time and priority for each process
    int bt[] = {30, 5, 12};
    int pri[] = {2, 1, 3};
    
    findAvgTime(n, bt, pri);
    return 0;
}
